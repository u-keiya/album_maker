### File: frontend/src/components/AlbumEdit.tsx

- **classname**: AlbumEdit (React Functional Component)
- **function name**: updateObjectOnServer
    - **short description**: オブジェクトの情報をサーバーに送信して更新する共通関数。
    - **input / output**:
        - **input**: albumId: string, objectId: string, updatedFields: Partial<AlbumObject>
        - **output**: Promise<AlbumObject | null>
- **function name**: handleObjectMouseDown
    - **short description**: キャンバス上のオブジェクトがマウスでクリックされたときに呼び出され、オブジェクトの選択とドラッグ操作の開始を処理する。
    - **input / output**:
        - **input**: e: React.MouseEvent<HTMLDivElement>, obj: AlbumObject
        - **output**: void
- **function name**: handleObjectResizeMouseDown
    - **short description**: オブジェクトのリサイズハンドルの `onMouseDown` イベントで呼び出され、リサイズ操作を開始する。
    - **input / output**:
        - **input**: e: React.MouseEvent<HTMLDivElement>, handle: string
        - **output**: void
- **function name**: handleObjectRotationMouseDown
    - **short description**: オブジェクトの回転ハンドルの `onMouseDown` イベントで呼び出され、回転操作を開始する。
    - **input / output**:
        - **input**: e: React.MouseEvent<HTMLDivElement>
        - **output**: void
- **function name**: handleCanvasMouseMove
    - **short description**: キャンバス上でマウスが移動したときに呼び出され、オブジェクトのドラッグ、リサイズ、回転操作中の表示を更新する。
    - **input / output**:
        - **input**: e: React.MouseEvent<HTMLDivElement>
        - **output**: void
- **function name**: handleCanvasMouseUp
    - **short description**: キャンバス上でマウスボタンが離されたときに呼び出され、オブジェクトのドラッグ、リサイズ、回転操作を完了し、サーバーに更新情報を送信する。
    - **input / output**:
        - **input**: e: React.MouseEvent<HTMLDivElement>
        - **output**: void
- **function name**: handleDeleteObject
    - **short description**: 選択されたオブジェクトを削除する。APIを呼び出し、成功したらローカルの状態も更新する。
    - **input / output**:
        - **input**: void
        - **output**: Promise<void>
### File: backend/src/entities/Sticker.ts

- **classname**: Sticker
    - **short description**: ステッカーエンティティの定義。ステッカーID、名前、カテゴリ、ファイルパス、サムネイルパス、タグ、作成日時、更新日時を持つ。
    - **input / output**: Not applicable for class definition.

### File: backend/src/routes/stickers.ts

- **function name**: GET /stickers
    - **short description**: 登録されている全てのステッカー情報を取得する。
    - **input / output**:
        - **Input**: JWT token (in header)
        - **Output (Success 200)**: Sticker[] (JSON array of sticker objects)
        - **Output (Error 500)**: { error: "ServerError", message: "Failed to fetch stickers." }
- **function name**: GET /stickers/:stickerId
    - **short description**: 指定されたIDのステッカー情報を取得する。
    - **input / output**:
        - **Input**: stickerId (in path parameter, UUID), JWT token (in header)
        - **Output (Success 200)**: Sticker (JSON object of the sticker)
        - **Output (Error 404)**: { error: "NotFound", message: "Sticker not found." }
        - **Output (Error 500)**: { error: "ServerError", message: "Failed to fetch sticker." }
- **function name**: POST /stickers
    - **short description**: 新しいステッカー情報を登録する (要管理者権限 - 現在はプレースホルダー)。
    - **input / output**:
        - **Input**: Request body { name: string, file_path: string (URL), category?: string, thumbnail_path?: string (URL), tags?: string[] }, JWT token (in header)
        - **Output (Success 201)**: Sticker (JSON object of the created sticker)
        - **Output (Error 400)**: { errors: [...] } (Validation errors)
        - **Output (Error 409)**: { error: "Conflict", message: "Sticker with this name or file path might already exist." }
        - **Output (Error 500)**: { error: "ServerError", message: "Failed to create sticker." }
- **function name**: PUT /stickers/:stickerId
    - **short description**: 指定されたIDのステッカー情報を更新する (要管理者権限 - 現在はプレースホルダー)。
    - **input / output**:
        - **Input**: stickerId (in path parameter, UUID), Request body { name?: string, file_path?: string (URL), category?: string, thumbnail_path?: string (URL), tags?: string[] }, JWT token (in header)
        - **Output (Success 200)**: Sticker (JSON object of the updated sticker)
        - **Output (Error 400)**: { errors: [...] } (Validation errors)
        - **Output (Error 404)**: { error: "NotFound", message: "Sticker not found." }
        - **Output (Error 500)**: { error: "ServerError", message: "Failed to update sticker." }
- **function name**: DELETE /stickers/:stickerId
    - **short description**: 指定されたIDのステッカー情報を削除する (要管理者権限 - 現在はプレースホルダー)。
    - **input / output**:
        - **Input**: stickerId (in path parameter, UUID), JWT token (in header)
        - **Output (Success 204)**: No Content
        - **Output (Error 404)**: { error: "NotFound", message: "Sticker not found." }
        - **Output (Error 500)**: { error: "ServerError", message: "Failed to delete sticker." }